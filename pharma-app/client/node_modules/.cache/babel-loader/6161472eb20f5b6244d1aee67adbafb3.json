{"ast":null,"code":"\"use strict\";\n\nvar _require = require('./errors'),\n    NoVideoInputDevicesError = _require.NoVideoInputDevicesError;\n\nfunction defaultDeviceIdChooser(filteredDevices, videoDevices) {\n  return filteredDevices.length > 0 ? filteredDevices[0].deviceId // No device found with the pattern thus use another video device\n  : videoDevices[0].deviceId;\n}\n\nmodule.exports = function getDeviceId(facingMode) {\n  var chooseDeviceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDeviceIdChooser; // Get manual deviceId from available devices.\n\n  return new Promise(function (resolve, reject) {\n    var enumerateDevices;\n\n    try {\n      enumerateDevices = navigator.mediaDevices.enumerateDevices();\n    } catch (err) {\n      reject(new NoVideoInputDevicesError());\n    }\n\n    enumerateDevices.then(function (devices) {\n      // Filter out non-videoinputs\n      var videoDevices = devices.filter(function (device) {\n        return device.kind == 'videoinput';\n      });\n\n      if (videoDevices.length < 1) {\n        reject(new NoVideoInputDevicesError());\n        return;\n      } else if (videoDevices.length == 1) {\n        // Only 1 video device available thus stop here\n        resolve(devices[0].deviceId);\n        return;\n      }\n\n      var pattern = facingMode == 'rear' ? /rear|back|environment/ig : /front|user|face/ig; // Filter out video devices without the pattern\n\n      var filteredDevices = videoDevices.filter(function (_ref) {\n        var label = _ref.label;\n        return pattern.test(label);\n      });\n      resolve(chooseDeviceId(filteredDevices, videoDevices));\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}